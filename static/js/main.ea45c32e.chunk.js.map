{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["business","Business","className","src","alt","React","Component","BusinessList","sortByOptions","SearchBar","Object","keys","map","sortOpt","sortByOptionValue","key","this","renderSortByOptions","placeholder","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAGIA,G,YACU,iFADVA,EAEM,sBAFNA,EAGS,sBAHTA,EAIM,aAJNA,EAKO,KALPA,EAMS,QANTA,EAQQ,IARRA,EASa,GA4BFC,E,uKAvBP,OACI,yBAAKC,UAAU,YACf,yBAAKA,UAAU,mBACX,yBAAKC,IAAKH,EAAmBI,IAAI,MAErC,4BAAKJ,GACL,yBAAKE,UAAU,wBACX,yBAAKA,UAAU,oBACf,2BAAIF,GACJ,2BAAIA,GACJ,2BAAIA,EAAiB,IAAMA,IAE3B,yBAAKE,UAAU,oBACf,uCACA,wBAAIA,UAAU,UAAUF,GACxB,2BAAIA,EAAJ,mB,GAjBOK,IAAMC,WCCdC,E,uKAVP,OACI,yBAAKL,UAAU,gBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALWG,IAAMC,WCA7BE,G,MAAgB,CAChB,aAAe,aACf,gBAAkB,SAClB,gBAAkB,iBAmCPC,E,oLA9BP,OAAOC,OAAOC,KAAKH,GAAeI,KAAI,SAAAC,GACnC,IAAIC,EAAoBN,EAAcK,GACtC,OAAO,wBAAIE,IAAKD,GAAT,gB,+BAKV,OACI,yBAAKZ,UAAU,aACX,yBAAKA,UAAU,0BACX,4BACCc,KAAKC,sBAGV,yBAAKf,UAAU,oBACX,2BAAOgB,YAAY,sBACnB,2BAAOA,YAAY,YAEvB,yBAAKhB,UAAU,oBACX,uBAAGiB,KAAK,KAAR,kB,GArBId,IAAMC,WCKfc,MAVf,WACE,OACE,yBAAKlB,UAAU,OACb,wCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea45c32e.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nvar business = {\n    imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n    name: 'MarginOtto Pizzeria',\n    address: '1010 Paddington Way',\n    city: 'Flavortown',\n    state: 'NY',\n    zipCode: '10101',\n    category: 'Italian',\n    rating: 4.5,\n    reviewCount: 90\n};\n\nclass Business extends React.Component {\n    render(){\n        return (\n            <div className=\"Business\">\n            <div className=\"image-container\">\n                <img src={business.imageSrc} alt=''/>\n            </div>\n            <h2>{business.name}</h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                <p>{business.address}</p>\n                <p>{business.city}</p>\n                <p>{business.state + ' ' + business.zipCode}</p>\n                </div>\n                <div className=\"Business-reviews\">\n                <h3>ITALIAN</h3>\n                <h3 className=\"rating\">{business.rating}</h3>\n                <p>{business.reviewCount} reviews</p>\n                </div>\n            </div>\n            </div>\n        );\n    }\n};\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render(){\n        return (\n            <div className=\"BusinessList\">\n                <Business />\n                <Business />\n            </div>\n        );\n    }\n\n};\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\nvar sortByOptions = {\n    'Best Match' : 'best_match',\n    'Highest Rated' : 'rating',\n    'Most Reviewed' : 'review_count'\n};\n\nclass SearchBar extends React.Component {\n    renderSortByOptions(){\n        return Object.keys(sortByOptions).map(sortOpt => {\n           let sortByOptionValue = sortByOptions[sortOpt];\n           return <li key={sortByOptionValue}>sortOpt</li>\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                    {this.renderSortByOptions}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input placeholder=\"Search Businesses\" />\n                    <input placeholder=\"Where?\" />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a href=\"#\" >Let's Go</a>\n                </div>\n            </div>\n\n        );\n    }\n\n\n\n};\n\nexport default SearchBar;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>ravenous</h1>\n      <SearchBar />\n      <BusinessList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}